@model KEC.Curation.PublishersUI.Models.RegisterViewModel
    @{ /**/ /**/
        ViewBag.Title = "Register";
        Layout = "~/Views/Shared/_Layouts.cshtml";
        }

<img src="~/Content/plugins/images/logo.png" /> 
    @*@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" })) { @Html.AntiForgeryToken()
    <h4>Create a new account</h4>
    <hr /> @Html.ValidationSummary("", new { @class = "text-danger" })

    <div class="form-group">
        <div class="col-md-8" style="width:300px;">
            @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.FirstName) })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-8" style="width:300px;">
            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.LastName) })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-8" style="width:300px;">
            @Html.TextBoxFor(m => m.Company, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Company) })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-8" style="width:300px;">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Email) })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-8" style="width:300px;">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.Password) })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-8" style="width:300px;">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control", placeholder = Html.DisplayNameFor(n => n.ConfirmPassword) })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-info col-md-6 col-md-offset-3" style="background-color:#00af57; margin-left:-30px; width:200px;" value="Register" />
        </div>
    </div>
    <p style="text-align:center;">
        @Html.ActionLink("Already Registered? Login", "Login")
        <br /> &copy;KEC 2018
    </p>
    }*@

<div class="row" style="width:100%;">

    <div class="" >

        <div class="" >


            <div class="ibox-content" style="width:100%;">

                <h2>

                    Registration Form

                </h2>

                <form id="form" action="#" class="wizard-big">

                    <h1>Account</h1>

                    <fieldset>

                        <h2>Account Information</h2>

                        <div class="row">

                            <div class="col-lg-8">

                                <div class="form-group">

                                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control required", placeholder = Html.DisplayNameFor(n => n.FirstName) })

                                </div>

                                <div class="form-group">

                                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control required", placeholder = Html.DisplayNameFor(n => n.LastName) })

                                </div>

                                <div class="form-group">


                                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control required email", placeholder = Html.DisplayNameFor(n => n.Email) })


                                </div>
                                <div class="form-group">


                                    @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control required", placeholder = Html.DisplayNameFor(n => n.PhoneNumber) })


                                </div>
                                <div class="form-group">


                                    @Html.PasswordFor(m => m.Password, new { @class = "form-control required valid validate-equalTo-blur", placeholder = Html.DisplayNameFor(n => n.Password) })

                                </div>
                                <div class="form-group">


                                    @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control required", placeholder = Html.DisplayNameFor(n => n.ConfirmPassword) })

                                </div>

                            </div>

                            <div class="col-lg-4">

                                <div class="text-center">

                                    <div style="margin-top: 20px">

                                        <i class="fa fa-sign-in" style="font-size: 180px;color: #e5e5e5 "></i>

                                    </div>

                                </div>

                            </div>

                        </div>

                    </fieldset>

                    <h1>Profile</h1>

                    <fieldset>

                        <h2>Profile Information</h2>

                        <div class="row">

                            <div class="col-lg-6">

                                <div class="form-group">

                                    <label>First name *</label>

                                    <input id="name" name="name" type="text" class="form-control required">

                                </div>

                                <div class="form-group">

                                    <label>Last name *</label>

                                    <input id="surname" name="surname" type="text" class="form-control required">

                                </div>

                            </div>

                            <div class="col-lg-6">

                                <div class="form-group">

                                    <label>Email *</label>

                                    <input id="email" name="email" type="text" class="form-control required email">

                                </div>

                                <div class="form-group">

                                    <label>Address *</label>

                                    <input id="address" name="address" type="text" class="form-control">

                                </div>

                            </div>

                        </div>

                    </fieldset>

                    <h1>Warning</h1>

                    <fieldset>

                        <div class="text-center" style="margin-top: 120px">

                            <h2>You did it Man :-)</h2>

                        </div>

                    </fieldset>

                    <h1>Finish</h1>

                    <fieldset>

                        <h2>Terms and Conditions</h2>

                        <input id="acceptTerms" name="acceptTerms" type="checkbox" class="required">
                        <label for="acceptTerms">I agree with the Terms and Conditions.</label>

                    </fieldset>

                </form>

            </div>

        </div>

    </div>

</div>

@section Scripts { @Scripts.Render("~/bundles/jquery") @Scripts.Render("~/bundles/bootstrap") @Scripts.Render("~/plugins/metsiMenu") @Scripts.Render("~/plugins/pace") @Scripts.Render("~/plugins/slimScroll") @Scripts.Render("~/bundles/inspinia") @Scripts.Render("~/plugins/wizardSteps") @Scripts.Render("~/plugins/iCheck") @Scripts.Render("~/plugins/validate")

<script type="text/javascript">
    $(document).ready(function () {

        $("#wizard").steps();

        $("#form").steps({

            bodyTag: "fieldset",

            onStepChanging: function (event,
                currentIndex, newIndex) {

                // Always allow going backward even if the current step contains invalid fields!

                if (currentIndex >
                    newIndex) {

                    return true;

                }

                // Forbid suppressing "Warning" step if the user is to young

                if (newIndex ===
                    3 && Number($("#age").val()) <
                    18) {

                    return false;

                }

                var form =
                    $(this);

                // Clean up if user went backward before

                if (currentIndex <
                    newIndex) {

                    // To remove error styles

                    $(".body:eq(" +
                        newIndex + ") label.error",
                        form).remove();

                    $(".body:eq(" +
                        newIndex + ") .error",
                        form).removeClass("error");

                }

                // Disable validation on fields that are disabled or hidden.

                form.validate().settings.ignore =
                    ":disabled,:hidden";

                // Start validation; Prevent going forward if false

                return form.valid();

            },

            onStepChanged: function (event,
                currentIndex, priorIndex) {

                // Suppress (skip) "Warning" step if the user is old enough.

                if (currentIndex ===
                    2 && Number($("#age").val()) >=
                    18) {

                    $(this).steps("next");

                }

                // Suppress (skip) "Warning" step if the user is old enough and wants to the previous step.

                if (currentIndex ===
                    2 && priorIndex ===
                    3) {

                    $(this).steps("previous");

                }

            },

            onFinishing: function (event,
                currentIndex) {

                var form =
                    $(this);

                // Disable validation on fields that are disabled.

                // At this point it's recommended to do an overall check (mean ignoring only disabled fields)

                form.validate().settings.ignore =
                    ":disabled";

                // Start validation; Prevent form submission if false

                return form.valid();

            },

            onFinished: function (event,
                currentIndex) {

                var form =
                    $(this);

                // Submit form input

                form.submit();

            }

        }).validate({

            errorPlacement: function (error,
                element) {

                element.before(error);

            },

            rules: {

                confirm: {

                    equalTo: "#password"

                }

            }

        });

    });
</script>

}