<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>CMS | @ViewBag.Title</title>
    @if (IsSectionDefined("Styles"))
    {@RenderSection("Styles", required: false)}

    @Styles.Render("~/Content/css")
    @Styles.Render("~/font-awesome/css")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/plugins/wizardStepsStyles")
    <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
    <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.0/js/bootstrap.min.js"></script>
    <style>


        .stepwizard-step p {
            /*margin-top: 5px;*/
        }

        .stepwizard-row {
            display: table-row;
        }

        .stepwizard {
            margin-top: 30px;
            display: table;
            width: 90%;
            position: relative;
        }

        .stepwizard-step button[disabled] {
            opacity: 1 !important;
            filter: alpha(opacity=100) !important;
        }

        .stepwizard-row:before {
            top: 14px;
            bottom: 0;
            position: absolute;
            content: " ";
            width: 100%;
            height: 1px;
            background-color: #ccc;
            z-order: 0;
        }

        .stepwizard-step {
            display: table-cell;
            text-align: center;
            position: relative;
        }

        .btn-circle {
            width: 30px;
            height: 30px;
            text-align: center;
            padding: 6px 0;
            font-size: 12px;
            line-height: 1.428571429;
            border-radius: 15px;
            background-color: #00b95f;
            border: 1px solid #00b95f;
        }

        .wrap-indicator {
            font-weight: bold;
            color: #245269;
            cursor: pointer;
        }
    </style>
</head>
<body style="background-color:#FBFBFB;">

    <div class="container-fluid">

        <div class="panel panel-default col-md-6 col-md-offset-3" style="width:50%; margin-top:10px;box-shadow: 5px 10px 18px  #888888;">
            <br />
            <div class="col-md-6 col-md-offset-3">
                <img src="~/Content/images/KEClogo.png" style="width:200px;" />

            </div>
            <br />
            <!-- Main view  -->
            @RenderBody()
        </div>
    </div>
    



    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/plugins/summernote")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/plugins/notify")
    @Scripts.Render("~/plugins/metisMenu")
    @Scripts.Render("~/plugins/pace")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/slimScroll")
    @Scripts.Render("~/bundles/inspinia")
    @Scripts.Render("~/js/globalConstants")
    @RenderSection("scripts", required: false)
    <script>
        $(document).ready(function () {

            var navListItems = $('div.setup-panel div a'),
                allWells = $('.setup-content'),
                allNextBtn = $('.nextBtn');

            allWells.hide();

            navListItems.click(function (e) {
                e.preventDefault();
                var $target = $($(this).attr('href')),
                    $item = $(this);

                if (!$item.hasClass('disabled')) {
                    navListItems.removeClass('btn-primary').addClass('btn-default');
                    $item.addClass('btn-primary');
                    allWells.hide();
                    $target.show();
                    $target.find('input:eq(0)').focus();
                }
            });

            allNextBtn.click(function () {
                var curStep = $(this).closest(".setup-content"),
                    curStepBtn = curStep.attr("id"),
                    nextStepWizard = $('div.setup-panel div a[href="#' + curStepBtn + '"]').parent().next().children("a"),
                    curInputs = curStep.find("input[type='text'],input[type='url']"),
                    isValid = true;

                $(".form-group").removeClass("has-error");
                for (var i = 0; i < curInputs.length; i++) {
                    if (!curInputs[i].validity.valid) {
                        isValid = false;
                        $(curInputs[i]).closest(".form-group").addClass("has-error");
                    }
                }

                if (isValid)
                    nextStepWizard.removeAttr('disabled').trigger('click');
            });

            $('div.setup-panel div a.btn-primary').trigger('click');

            (function ($) {
                var MAIN_TEMPLATE_1 = '{preview}\n' +
                    '<div class="input-group {class}">\n' +
                    '   {caption}\n' +
                    '   <div class="input-group-btn">\n' +
                    '       {remove}\n' +
                    '       {upload}\n' +
                    '       {browse}\n' +
                    '   </div>\n' +
                    '</div>';

                var MAIN_TEMPLATE_2 = '{preview}\n{remove}\n{upload}\n{browse}\n';

                var PREVIEW_TEMPLATE = '<div class="file-preview {class}">\n' +
                    '   <div class="file-preview-status text-center text-success"></div>\n' +
                    '   <div class="close fileinput-remove text-right">×</div>\n' +
                    '   <div class="file-preview-thumbnails"></div>\n' +
                    '   <div class="clearfix"></div>' +
                    '</div>';

                var CAPTION_TEMPLATE = '<div class="form-control file-caption {class}">\n' +
                    '   <span class="glyphicon glyphicon-file"></span> <span class="file-caption-name"></span>\n' +
                    '</div>';

                var MODAL_TEMPLATE = '<div id="{id}" class="modal fade">\n' +
                    '  <div class="modal-dialog modal-lg">\n' +
                    '    <div class="modal-content">\n' +
                    '      <div class="modal-header">\n' +
                    '        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>\n' +
                    '        <h3 class="modal-title">Detailed Preview <small>{title}</small></h3>\n' +
                    '      </div>\n' +
                    '      <div class="modal-body">\n' +
                    '        <textarea class="form-control" style="font-family:Monaco,Consolas,monospace; height: {height}px;" readonly>{body}</textarea>\n' +
                    '      </div>\n' +
                    '    </div>\n' +
                    '  </div>\n' +
                    '</div>\n';

                var isEmpty = function (value, trim) {
                    return value === null || value === undefined || value == []
                        || value === '' || trim && $.trim(value) === '';
                };
                var getValue = function (options, param, value) {
                    return (isEmpty(options) || isEmpty(options[param])) ? value : options[param];
                };
                var isImageFile = function (type, name) {
                    return (typeof type !== "undefined") ? type.match('image.*') : name.match(/\.(gif|png|jpe?g)$/i);
                };
                var isTextFile = function (type, name) {
                    return (typeof type !== "undefined") ? type.match('text.*') : name.match(/\.(txt|md|csv|htm|html|php|ini)$/i);
                };
                var uniqId = function () {
                    return Math.round(new Date().getTime() + (Math.random() * 100));
                };
                var FileInput = function (element, options) {
                    this.$element = $(element);
                    this.showCaption = options.showCaption;
                    this.showPreview = options.showPreview;
                    this.showRemove = options.showRemove;
                    this.showUpload = options.showUpload;
                    this.captionClass = options.captionClass;
                    this.previewClass = options.previewClass;
                    this.mainClass = options.mainClass;
                    if (isEmpty(options.mainTemplate)) {
                        this.mainTemplate = this.showCaption ? MAIN_TEMPLATE_1 : MAIN_TEMPLATE_2;
                    }
                    else {
                        this.mainTemplate = options.mainTemplate;
                    }
                    this.previewTemplate = (this.showPreview) ? options.previewTemplate : '';
                    this.captionTemplate = options.captionTemplate;
                    this.browseLabel = options.browseLabel;
                    this.browseIcon = options.browseIcon;
                    this.browseClass = options.browseClass;
                    this.removeLabel = options.removeLabel;
                    this.removeIcon = options.removeIcon;
                    this.removeClass = options.removeClass;
                    this.uploadLabel = options.uploadLabel;
                    this.uploadIcon = options.uploadIcon;
                    this.uploadClass = options.uploadClass;
                    this.uploadUrl = options.uploadUrl;
                    this.msgLoading = options.msgLoading;
                    this.msgProgress = options.msgProgress;
                    this.msgSelected = options.msgSelected;
                    this.previewFileType = options.previewFileType;
                    this.wrapTextLength = options.wrapTextLength;
                    this.wrapIndicator = options.wrapIndicator;
                    this.isDisabled = this.$element.attr('disabled') || this.$element.attr('readonly');
                    if (isEmpty(this.$element.attr('id'))) {
                        this.$element.attr('id', uniqId());
                    }
                    this.$container = this.createContainer();
                    /* Initialize plugin option parameters */
                    this.$captionContainer = getValue(options, 'elCaptionContainer', this.$container.find('.file-caption'));
                    this.$caption = getValue(options, 'elCaptionText', this.$container.find('.file-caption-name'));
                    this.$previewContainer = getValue(options, 'elPreviewContainer', this.$container.find('.file-preview'));
                    this.$preview = getValue(options, 'elPreviewImage', this.$container.find('.file-preview-thumbnails'));
                    this.$previewStatus = getValue(options, 'elPreviewStatus', this.$container.find('.file-preview-status'));
                    this.$name = this.$element.attr('name') || options.name;
                    this.$hidden = this.$container.find('input[type=hidden][name="' + this.$name + '"]');
                    if (this.$hidden.length === 0) {
                        this.$hidden = $('<input type="hidden" />');
                        this.$container.prepend(this.$hidden);
                    }
                    this.original = {
                        preview: this.$preview.html(),
                        hiddenVal: this.$hidden.val()
                    };
                    this.listen()
                };

                FileInput.prototype = {
                    constructor: FileInput,
                    listen: function () {
                        var self = this;
                        self.$element.on('change', $.proxy(self.change, self));
                        $(self.$element[0].form).on('reset', $.proxy(self.reset, self));
                        self.$container.find('.fileinput-remove').on('click', $.proxy(self.clear, self));
                    },
                    trigger: function (e) {
                        var self = this;
                        self.$element.trigger('click');
                        e.preventDefault();
                    },
                    clear: function (e) {
                        var self = this;
                        if (e) {
                            e.preventDefault();
                        }

                        self.$hidden.val('');
                        self.$hidden.attr('name', self.name);
                        self.$element.attr('name', '');
                        self.$element.val('');
                        if (e !== false) {
                            self.$element.trigger('change');
                            self.$element.trigger('fileclear');
                        }
                        self.$preview.html('');
                        self.$caption.html('');
                        self.$container.removeClass('file-input-new').addClass('file-input-new');
                    },
                    reset: function (e) {
                        var self = this;
                        self.clear(false);
                        self.$hidden.val(self.original.hiddenVal);
                        self.$preview.html(self.original.preview);
                        self.$container.find('.fileinput-filename').text('');
                        self.$element.trigger('filereset');
                    },
                    change: function (e) {
                        var self = this;
                        var elem = self.$element, files = elem.get(0).files, numFiles = files ? files.length : 1,
                            label = elem.val().replace(/\\/g, '/').replace(/.*\//, ''), preview = self.$preview,
                            container = self.$previewContainer, status = self.$previewStatus, msgLoading = self.msgLoading,
                            msgProgress = self.msgProgress, msgSelected = self.msgSelected, tfiles,
                            fileType = self.previewFileType, wrapLen = parseInt(self.wrapTextLength),
                            wrapInd = self.wrapIndicator;

                        if (e.target.files === undefined) {
                            tfiles = e.target && e.target.value ? [
                                { name: e.target.value.replace(/^.+\\/, '') }
                            ] : [];
                        }
                        else {
                            tfiles = e.target.files;
                        }
                        if (tfiles.length === 0) {
                            return;
                        }
                        preview.html('');
                        var total = tfiles.length, self = self;
                        for (var i = 0; i < total; i++) {
                            (function (file) {
                                var caption = file.name;
                                var isImg = isImageFile(file.type, file.name);
                                var isTxt = isTextFile(file.type, file.name);
                                if (preview.length > 0 && (fileType == "any" ? (isImg || isTxt) : (fileType == "text" ? isTxt : isImg)) && typeof FileReader !== "undefined") {
                                    var reader = new FileReader();
                                    status.html(msgLoading);
                                    container.addClass('loading');
                                    reader.onload = function (theFile) {
                                        var content = '', modal = "";
                                        if (isTxt) {
                                            var strText = theFile.target.result;
                                            if (strText.length > wrapLen) {
                                                var id = uniqId(), height = window.innerHeight * .75,
                                                    modal = MODAL_TEMPLATE.replace("{id}", id).replace("{title}", caption).replace("{body}", strText).replace("{height}", height);
                                                wrapInd = wrapInd.replace("{title}", caption).replace("{dialog}", "$('#" + id + "').modal('show')");
                                                strText = strText.substring(0, (wrapLen - 1)) + wrapInd;
                                            }
                                            content = '<div class="file-preview-frame"><div class="file-preview-text" title="' + caption + '">' + strText + '</div></div>' + modal;
                                        }
                                        else {
                                            content = '<div class="file-preview-frame"><img src="' + theFile.target.result + '" class="file-preview-image" title="' + caption + '" alt="' + caption + '"></div>';
                                        }
                                        preview.append("\n" + content);
                                        if (i >= total - 1) {
                                            container.removeClass('loading');
                                            status.html('');
                                        }
                                    };
                                    reader.onprogress = function (data) {
                                        if (data.lengthComputable) {
                                            var progress = parseInt(((data.loaded / data.total) * 100), 10);
                                            var msg = msgProgress.replace('{percent}', progress).replace('{file}', file.name);
                                            status.html(msg);
                                        }
                                    };
                                    if (isTxt) {
                                        reader.readAsText(file);
                                    }
                                    else {
                                        reader.readAsDataURL(file);
                                    }
                                }
                                else {
                                    preview.append("\n" + '<div class="file-preview-frame"><div class="file-preview-other"><h2><i class="glyphicon glyphicon-file"></i></h2>' + caption + '</div></div>');
                                }
                            })(tfiles[i]);
                        }
                        var log = numFiles > 1 ? msgSelected.replace('{n}', numFiles) : label;
                        self.$caption.html(log);
                        self.$container.removeClass('file-input-new');
                        elem.trigger('fileselect', [numFiles, label]);
                    },
                    createContainer: function () {
                        var self = this;
                        var container = $(document.createElement("div")).attr({ "class": 'file-input file-input-new' }).html(self.renderMain());
                        self.$element.before(container);
                        container.find('.btn-file').append(self.$element);
                        return container;
                    },
                    renderMain: function () {
                        var self = this;
                        var preview = self.previewTemplate.replace('{class}', self.previewClass);
                        var css = self.isDisabled ? self.captionClass + ' file-caption-disabled' : self.captionClass;
                        var caption = self.captionTemplate.replace('{class}', css);
                        return self.mainTemplate.replace('{class}', self.mainClass).
                            replace('{preview}', preview).
                            replace('{caption}', caption).
                            replace('{upload}', self.renderUpload()).
                            replace('{remove}', self.renderRemove()).
                            replace('{browse}', self.renderBrowse());
                    },
                    renderBrowse: function () {
                        var self = this, css = self.browseClass + ' btn-file', status = '';
                        if (self.isDisabled) {
                            status = ' disabled ';
                        }
                        return '<div class="' + css + '"' + status + '> ' + self.browseIcon + self.browseLabel + ' </div>';
                    },
                    renderRemove: function () {
                        var self = this, css = self.removeClass + ' fileinput-remove fileinput-remove-button', status = '';
                        if (!self.showRemove) {
                            return '';
                        }
                        if (self.isDisabled) {
                            status = ' disabled ';
                        }
                        return '<button type="button" class="' + css + '"' + status + '>' + self.removeIcon + self.removeLabel + '</button>';
                    },
                    renderUpload: function () {
                        var self = this, content = '', status = '';
                        if (!self.showUpload) {
                            return '';
                        }
                        if (self.isDisabled) {
                            status = ' disabled ';
                        }
                        if (isEmpty(self.uploadUrl)) {
                            content = '<button type="submit" class="' + self.uploadClass + '"' + status + '>' + self.uploadIcon + self.uploadLabel + '</button>';
                        }
                        else {
                            content = '<a href="' + self.uploadUrl + '" class="' + self.uploadClass + '"' + status + '>' + self.uploadIcon + self.uploadLabel + '</a>';
                        }
                        return content;
                    },
                }

                $.fn.fileinput = function (options) {
                    return this.each(function () {
                        var $this = $(this), data = $this.data('fileinput')
                        if (!data) {
                            $this.data('fileinput', (data = new FileInput(this, options)))
                        }
                        if (typeof options == 'string') {
                            data[options]()
                        }
                    })
                };

                //FileInput plugin definition
                $.fn.fileinput = function (option) {
                    var args = Array.apply(null, arguments);
                    args.shift();
                    return this.each(function () {
                        var $this = $(this),
                            data = $this.data('fileinput'),
                            options = typeof option === 'object' && option;

                        if (!data) {
                            $this.data('fileinput', (data = new FileInput(this, $.extend({}, $.fn.fileinput.defaults, options, $(this).data()))));
                        }

                        if (typeof option === 'string') {
                            data[option].apply(data, args);
                        }
                    });
                };

                $.fn.fileinput.defaults = {
                    showRemove: true,
                    showUpload: true,
                    captionClass: '',
                    previewClass: '',
                    mainClass: '',
                    mainTemplate: null,
                    previewTemplate: PREVIEW_TEMPLATE,
                    captionTemplate: CAPTION_TEMPLATE,
                    browseLabel: 'Browse …',
                    browseIcon: '<i class="glyphicon glyphicon-folder-open"></i>  ',
                    browseClass: 'btn btn-primary',
                    removeLabel: 'Remove',
                    removeIcon: '<i class="glyphicon glyphicon-ban-circle"></i> ',
                    removeClass: 'btn btn-default',
                    uploadLabel: 'Upload',
                    uploadIcon: '<i class="glyphicon glyphicon-upload"></i> ',
                    uploadClass: 'btn btn-default',
                    uploadUrl: null,
                    msgLoading: 'Loading …',
                    msgProgress: 'Loaded {percent}% of {file}',
                    msgSelected: '{n} files selected',
                    previewFileType: 'image',
                    wrapTextLength: 250,
                    wrapIndicator: ' <span class="wrap-indicator" title="{title}" onclick="{dialog}">[…]</span>',
                    elCaptionContainer: null,
                    elCaptionText: null,
                    elPreviewContainer: null,
                    elPreviewImage: null,
                    elPreviewStatus: null
                };


                $(function () {
                    var $element = $('input.file[type=file]');
                    if ($element.length > 0) {
                        $element.fileinput();
                    }

                });

            })(window.jQuery);

            $("#file-3").fileinput({
                showCaption: true,
                browseClass: "btn btn-primary btn-lg",
                fileType: ".pdf"
            });


        });



    </script>
</body>
</html>
